{# --==============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : SQL Server                                                                                                                       -- #}
{# -- Template Name      : nu3_sqlserver_utility_elements                                                                                                   -- #}
{# -- Description        : Macros to build SQL parts to be used in other templates                                                                          -- #}
{# --                                                                                                                                                       -- #}
{# --==============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- History                                                                                                                                               -- #}
{# -- 20170711 | Eckhard Zemp         | Initial Creation                                                                                                    -- #}
{# -- 20171101 | Eckhard Zemp         | Document & Clean-Up                                                                                                 -- #}
{# -- 20171113 | Eckhard Zemp         | Lookup Beautify                                                                                                     -- #}
{# -- 20171114 | Eckhard Zemp         | Add objects for PIT tables                                                                                          -- #}
{# -- 20171116 | Eckhard Zemp         | Modify version calculation                                                                                          -- #}
{# -- 20171124 | Eckhard Zemp         | Redesign to a fully layered approach                                                                                -- #}
{# -- 20171208 | Eckhard Zemp         | Add optional zero key id for dimensions                                                                             -- #}
{# -- 20171214 | Eckhard Zemp         | Optimize View Creation in WHERE and Condense                                                                        -- #}
{# --                                                                                                                                                       -- #}
{# --==============================================================================                                                                         -- #}

{# --==============================================================================                                                                         -- #}
{# -- Insert                                                                                                                                                -- #}
{# --==============================================================================                                                                         -- #}

{# -- This macro adds the target columns for an INSERT statement -- #}
{# -- Every column is taken -- #}
{% macro addInsertColumns(indent = "  ",firstInClause = true) %}
  {%- from table.columns as column where (column.artificial == false or (column.artificial == true and column.sourceTable is defined)) -%}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}{{ column.name }}{% br %}
  {%- endfrom %}
{% endmacro %}

{# --==============================================================================                                                                         -- #}
{# -- SELECT statements                                                                                                                                     -- #}
{# -- (ordered by execution layer)                                                                                                                          -- #}
{# --==============================================================================                                                                         -- #}

{# -- This macro adds the source columns and transformations for a SELECT statement to load data from a source table -- #}
{% macro addSelectColumnsExtract(indent = "       ",firstInClause = true) %}
  {%- set empty = "" -%}
  {%- set dssLoadDate = dssLoadDate() | trim %}
  {%- set dssSequenceNo = dssSequenceNo() | trim %}
  {%- from table.columns as column where (column.sourceTable is defined or column.transform != "") and column.lookupKey == false %}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- if column.transform | trim != "" -%}
      {{- getLines(indent + " ",object = column.transform) }}
    {%- elseif column.name == dssLoadDate -%}
      {%- fetch column.sourceTable %}      
      {%- if column.sourceTable.objectType == Types.ObjectType.DataStore and table.ObjectType == Types.ObjectType.Stage -%}      
        {%- from column.sourceTable.columns as column2 where column2.name == dssSequenceNo -%}      
          DATEADD(NS,100*{{ column.sourceTable.name }}.{{ dssSequenceNo() }},{{ column.sourceTable.name }}.{{ dssLoadDate() }})
        {%- else %}
          {{ column.source }}
        {%- endfrom %}
      {%- elseif table.objectType == Types.ObjectType.Stage -%} 
        {%- set tableList = "" %}
        {%- set newLine = "
" %}          
        {%- from table.columns as column where column.sourceTable is defined %}
          {%- fetch column.sourceColumn %}
          {%- if column.sourceColumn.artificial == false %}
            {%- fetch column.sourceTable %}
            {%- from column.sourceTable.columns as column2 %}
              {%- if column2.name == dssLoadDate %}
                {%- if tableList contains column.sourceTable.name -%}{% else %}
                  {%- set tableList = tableList + column.sourceTable.name + ";" -%}
                {%- endif %}
              {%- endif %}
            {%- endfrom %}
          {%- endif %}
        {%- endfrom %}
        {%- set count = 0 %}
        {%- for sourceTable in (tableList.Replace(';',newLine) | lines) -%}
          {%- set count = count + 1 %}
        {%- endfor %}
        {%- if count > 1 -%}
          ({% br %}
          {{- indent }}   SELECT MAX(v) FROM (VALUES {% br %}
          {%- for sourceTable in (tableList.Replace(';',newLine) | lines) -%}
            {{- indent }}     {% if loop.first and firstInClause %} {% else %},{% endif -%}
            ({{ sourceTable }}.dss_load_datetime){% br %}
          {%- endfor -%}
          {{- indent }}   ) AS VALUE(v){% br %}
          {{- indent }} )      
        {%- else -%}
          {{ column.source }}            
        {%- endif %}
      {%- else -%}
        {{ column.source }}      
      {%- endif %}
    {%- else -%}
      {{ column.source }}
    {%- endif %} AS {{ column.name }} {% br %}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the source columns and transformation for a merge SELECT statement to load data from a source table -- #}
{% macro addSelectColumnsExtractMerge(indent = "       ",firstInClause = true) %}
  {%- from table.columns as column where (column.sourceTable is defined or column.transform != "") and column.lookupKey == false %}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- if column.transform | trim != "" -%}
      {{- getLines(indent + " ",object = column.transform) }}
    {%- else -%}
      {%- fetch column.sourceColumn -%}      
      {{ column.sourceColumn.name }}
    {%- endif %} AS {{ column.name }} {% br %}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the source columns and cleans the business key columns for hashing -- #}
{% macro addSelectColumnsHashBKClean(indent = "       ",firstInClause = true) %}
  {%- from table.columns as column where (column.sourceTable is defined or column.transform != "") and column.lookupKey == false %}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- set isBKColumn = false %}
    {%- for hashColumn in table.columns %}
      {%- if hashColumn.hubHashKey or hashColumn.linkHashKey -%}
        {%- for hashSource in hashColumn.hashKeySources -%}
          {%- if column.name == hashSource.name -%}
            {%- set isBKColumn = true %}          
          {%- endif %}
        {%- endfor %}
      {%- endif %}
    {%- endfor %}
    {%- if isBKColumn == true -%}
      {{ getBKCleaned(BKColumn = column) }} 
    {%- else -%}
      {{ column.name }}
    {%- endif %} AS {{ column.name }}{% br %}
  {%- endfrom %}    
{% endmacro %}

{# -- This macro adds the hash columns -- #}
{% macro addSelectColumnsHash(indent = "       ",firstInClause = true) %}
  {%- from table.columns as column where (column.hubHashKey or column.linkHashKey or column.changeHashKey) and column.hashKeySources is defined and table.viewInfo is not defined -%}
    {{- indent -}}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- if column.hubHashKey -%}
      {{ getHubHashKey(hashColumn = column, indent = indent + "    ") }} 
    {%- elseif column.linkHashKey -%}
      {{ getLinkHashKey(hashColumn = column, indent = indent + "    ") }} 
    {%- elseif column.changeHashKey -%}
      {{ getChangeHashKey(hashColumn = column, indent = indent + "    ") }}
    {%- endif %} AS {{ column.name }}{% br %}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds a row_number column to remove duplicates -- #}
{% macro addSelectColumnsCondense(indent = "       ",firstInClause = true) %}
  {%- set dssLoadDate = dssLoadDate() | trim %}
  {%- set dssSequenceNo = dssSequenceNo() | trim %}
  {%- set objectPrefixStage = objectPrefixStage() | trim %}
  {%- set objectPrefixHub = objectPrefixHub() | trim %}
  {%- set objectPrefixLink = objectPrefixLink() | trim %}
  {%- set objectPrefixSatellite = objectPrefixSatellite() | trim %}
  {%- set hasBK = false -%}
  {%- from table.columns as column where column.businessKey -%}
    {%- set hasBK = true -%}
  {%- endfrom -%}  
  {%- if table.objectType == Types.ObjectType.Stage or (table.objectType == Types.ObjectType.View and table.name contains objectPrefixStage) -%}
    {%- if hasBK == true %}
      {{- indent }},ROW_NUMBER() OVER (PARTITION BY {{ getBKString() }} ORDER BY {% from table.columns as column where column.name == dssLoadDate or column.name == dssSequenceNo %}
        {%- if not loop.first -%}, {% endif %}
        {{- column.name }} DESC
      {%- endfrom %}) AS {{ dssRowNo() }}{% br %}
    {% endif %}
  {%- elseif table.objectType == Types.ObjectType.Hub or (table.objectType == Types.ObjectType.View and table.name contains objectPrefixHub) -%}
    {{- indent }},ROW_NUMBER() OVER (PARTITION BY {{ getHashKeyString() }} , {{ getBKString() }} ORDER BY {{ dssLoadDate() }} ASC ) AS {{ dssRowNo() }}{% br %}    
  {%- elseif table.objectType == Types.ObjectType.Link or (table.objectType == Types.ObjectType.View and table.name contains objectPrefixLink) -%}
    {{- indent }},ROW_NUMBER() OVER (PARTITION BY {{ getHashKeyString() }} ORDER BY {{ dssLoadDate() }} ASC ) AS {{ dssRowNo() }}{% br %}        
  {%- elseif table.objectType == Types.ObjectType.Satellite or (table.objectType == Types.ObjectType.View and table.name contains objectPrefixSatellite) -%}
    {%- from table.columns as column where column.changeHashKey -%}
      {{- indent }},CASE WHEN LAG( {{ dssChangeHash() }} , 1 , {{ dssChangeHashDefaultValue() }} ) OVER ( PARTITION BY {{ getHashKeyString() }} ORDER BY {{ dssLoadDate() }} ) = {{ dssChangeHash() }} THEN 0{% br %}
      {{- indent }}      ELSE 1{% br %}
      {{- indent }} END AS is_{{ column.name }}_change{% br %}
    {%- endfrom %}
    {%- from table.columns as column where column.name == dssLoadDate -%}    
      {{- indent }},CASE WHEN LAG( {{ dssLoadDate() }} , 1 , {{ dssDateTimeMinValue() }} ) OVER ( PARTITION BY {{ getHashKeyString() }} ORDER BY {{ dssLoadDate() }} ) = {{ dssLoadDate() }} THEN 0{% br %}
      {{- indent }}      ELSE 1{% br %}
      {{- indent }} END AS is_{{ column.name }}_change{% br %}
    {%- endfrom %}
  {%- elseif table.objectType == Types.ObjectType.Dimension or (table.objectType == Types.ObjectType.View and table.name contains objectPrefixDimension) -%}
  {%- elseif table.objectType == Types.ObjectType.Fact or (table.objectType == Types.ObjectType.View and table.name contains objectPrefixFact) -%}
  {%- elseif table.objectType == Types.ObjectType.DataStore -%}
    {%- from table.columns as column where column.changeHashKey -%}  
      {{- indent }},CASE WHEN LAG( {{ dssChangeHash() }} , 1 , {{ dssChangeHashDefaultValue() }} ) OVER ( PARTITION BY {{ getBKString() }} ORDER BY {{ dssLoadDate() }} ) = {{ dssChangeHash() }} THEN 0{% br %}
      {{- indent }}      ELSE 1{% br %}
      {{- indent }} END AS is_{{ column.name }}_change{% br %}
    {%- endfrom %}
    {%- from table.columns as column where column.name == dssLoadDate -%}    
      {{- indent }},CASE WHEN LAG( {{ dssLoadDate() }} , 1 , {{ dssDateTimeMinValue() }} ) OVER ( PARTITION BY {{ getBKString() }} ORDER BY {{ dssLoadDate() }} ) = {{ dssLoadDate() }} THEN 0{% br %}
      {{- indent }}      ELSE 1{% br %}
      {{- indent }} END AS is_{{ column.name }}_change{% br %}    
    {%- endfrom %}
  {%- endif %}      
{% endmacro %}

{# -- This macro adds the columns for history columns -- #}
{% macro addSelectColumnsHistory(indent = "       ",firstInClause = true) %}
  {%- from table.columns as column where column.dssStartDate or column.dssEndDate or column.dssVersion or column.currentFlag -%}
    {{- indent -}}
    {%- if loop.first and firstInClause %} {% else %},{% endif -%}  
    {%- if column.dssStartDate -%}
      {%- if table.objectType == Types.ObjectType.DataStore -%}
                     CASE WHEN current_rows.{{ getFirstBK() }} IS NULL{% br %}
        {{- indent }}      THEN CAST({{ dssDateTimeMinValue() }} AS {{ dssDateTimeDataType() }}){% br %}
        {{- indent }}      ELSE {{ table.name }}.{{ dssLoadDate() }}{% br %}
        {{- indent }} END
      {%- else -%}
        {{ table.name }}.{{ dssLoadDate() }}
      {%- endif %}            
    {%- elseif column.dssEndDate -%}
      CAST({{ dssDateTimeMaxValue() }} AS {{ dssDateTimeDataType() }})
    {%- elseif column.dssVersion -%}
                   CASE WHEN current_rows.{{ getFirstBK() }} IS NULL{% br %}
      {{- indent }}      THEN 1{% br %}
      {{- indent }}      ELSE current_rows.{{ column.name }} + 1{% br %}
      {{- indent }} END
    {%- elseif column.currentFlag -%}
      'Y'
    {%- endif %} AS {{ column.name }} {% br %}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the columns for dimension lookups -- #}
{% macro addSelectColumnsLookup(indent = "       ",firstInClause = true) %}
  {%- from table.columns as column where column.lookupKey -%}
    {%- set zero_key_id = 0 -%}        
    {%- fetch column.sourceTable -%}    
    {%- if column.sourceTable.extendedPropertyValuesByName.zero_key_id is defined -%}
      {%- set list = column.sourceTable.extendedPropertyValuesByName.zero_key_id -%}
      {%- for item in (list | lines) -%}
        {%- if item | trim != "" -%}{%- set zero_key_id = item | trim -%}{%- endif -%}
      {%- endfor -%} 
    {%- endif -%}
    {{- indent -}}
    {%- if loop.first and firstInClause %} {% else %},{% endif -%}  
    COALESCE({{ column.source }},{{ zero_key_id }}) AS {{ column.name }}{% br %}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the columns for the final result -- #}
{% macro addSelectColumnsLoad(indent = "       " , sysObjectType = "TABLE" , firstInClause = true) %}
  {%- from table.columns as column where (column.artificial == false or (column.artificial == true and column.sourceTable is defined)) %}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- if column.updateTime or column.createTime -%}
      {%- if column.sourceTable is defined -%}
        {%- fetch column.sourceColumn -%}      
        {{ table.name }}.{{ column.sourceColumn.name }}
      {%- elseif sysObjectType == "TABLE" -%}
        @v_current_datetime
      {%- elseif sysObjectType == "VIEW" -%}
        {{ currentDateTimeFormula() }}
      {%- else -%}
        MISSING FORMULA
      {%- endif -%}
    {%- else -%}
      {{ table.name }}.{{ column.name }}
    {%- endif %} AS {{ column.name }} {% br %}
  {%- endfrom %}
{% endmacro %}

{# --==============================================================================                                                                         -- #}
{# -- Stage Table (Record Tracking)                                                                                                                         -- #}
{# --==============================================================================                                                                         -- #}

{% macro addSelectColumnsRTStage(indent = "       ",firstInClause = true) %}
  {%- set isActive = isActive() | trim %}
  {%- set isFull = isFull() | trim %}  
  {%- from table.columns as column where column.createTime == false and column.updateTime == false -%}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- if column.name == isActive -%}
      1 AS is_active{% br %} 
    {%- elseif column.name == isFull -%}
      CASE WHEN @load_table_available = 1 THEN CASE WHEN @load_table_data = 1 THEN 1 ELSE 0 END ELSE 1 END AS is_full{% br %}
    {%- else -%}
      {{ column.name }}{% br %} 
    {%- endif -%}
  {%- endfrom %}
{% endmacro %}

{% macro addSelectColumnsRTLoad(indent = "       ",firstInClause = true) %}
  {%- set isActive = isActive() | trim %}
  {%- set isFull = isFull() | trim %}    
  {%- from table.columns as column where column.createTime == false and column.updateTime == false -%}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- if column.name == isActive -%}
      1 AS is_active{% br %} 
    {%- elseif column.name == isFull -%}
      1 AS is_full{% br %}
    {%- else -%}
      {{ column.name }}{% br %} 
    {%- endif -%}
  {%- endfrom %}
{% endmacro %}

{% macro addSelectColumnsRTHistory(indent = "       ",firstInClause = true) %}
  {%- set dssLoadDate = dssLoadDate() | trim %}
  {%- set isActive = isActive() | trim %}
  {%- set isFull = isFull() | trim %}    
  {%- from table.columns as column where column.createTime == false and column.updateTime == false -%}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- if column.name == isActive -%}
      0 AS is_active{% br %} 
    {%- elseif column.name == isFull -%}
      1 AS is_full{% br %}
    {%- elseif column.name == dssLoadDate -%}      
      {{ currentDateTimeFormula() }} as {{ dssLoadDate() }}{% br %}
    {%- else -%}
      {{ column.name }}{% br %} 
    {%- endif -%}
  {%- endfrom %}
{% endmacro %}

{# --==============================================================================                                                                         -- #}
{# -- Update                                                                                                                                                -- #}
{# --==============================================================================                                                                         -- #}

{% macro addUpdateColumnsOutdate(indent = "       ",firstInClause = true) %}
  {%- from table.columns as column where column.dssEndDate or column.currentFlag or column.updateTime %}
    {{- indent }}
    {%- if loop.first and firstInClause %}SET    {% else %}      ,{% endif %}
    {%- if column.dssEndDate -%}
      {{ column.name }} = {{ dssEndDateFormula() }}
    {%- elseif column.currentFlag -%}
      {{ column.name }} = 'N'
    {%- elseif column.updateTime -%}
      {{ column.name }} = @v_current_datetime      
    {%- endif %}{% br %}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the SET columns for an UPDATE statement to modify data in a dimension table -- #}
{% macro addUpdateColumnsReplace(indent = "    ",firstInClause = true) %}
  {%- set empty = "" %}
  {%- from table.columns as column where column.artificial == false and column.createTime == false %}
    {{- indent }}
    {%- if loop.first and firstInClause %}SET     {% else %}       ,{% endif %}{{ column.name }} = {{ empty }}
    {%- if column.transform | trim != "" -%}
      {{ column.transform | trim }}
    {%- elseif column.updateTime -%} 
      @v_current_datetime
    {%- else -%}
      {{ column.source }}
    {%- endif %}{% br %}
  {%- endfrom %}
{% endmacro %}

{# --==============================================================================                                                                         -- #}
{# -- Dimension Table                                                                                                                                       -- #}
{# --==============================================================================                                                                         -- #}

{# -- This macro adds the target columns of a zero key row for an INSERT statement to load data into a dimension table  -- #}
{# -- Only artificial key column, business key columns and system columns are needed -- #}
{% macro addInsertColumnsDimZeroKey(indent = "       ",firstInClause = true) %}
  {%- set dssLoadDate = dssLoadDate() | trim %}
  {%- from table.columns as column where column.artificial or column.businessKey or column.createTime or column.updateTime or column.name == dssLoadDate -%}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}{{ column.name }}{% br %}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the source values of a zero key row to load it into a dimension table  -- #}
{% macro addSelectColumnsDimZeroKey(indent = "       ",firstInClause = true) %}
  {%- set dssLoadDate = dssLoadDate() | trim %}
  {%- from table.columns as column where column.artificial or column.businessKey or column.createTime or column.updateTime or column.name == dssLoadDate %}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- if column.artificial -%}
      {%- set zero_key_id = 0 -%}        
      {%- if table.extendedPropertyValuesByName.zero_key_id is defined -%}
        {%- set list = table.extendedPropertyValuesByName.zero_key_id -%}
        {%- for item in (list | lines) -%}
          {%- if item | trim != "" -%}{%- set zero_key_id = item | trim -%}{%- endif %}
        {%- endfor %} 
      {%- endif -%}
      {{ zero_key_id }}
    {%- elseif column.businessKey -%}
      '{{ column.zeroKeyValue }}'
    {%- elseif column.updateTime or column.createTime -%} 
      @v_current_datetime
    {%- elseif column.name == dssLoadDate -%} 
      {{ dssDateTimeMinValue() }}
    {%- endif %} AS {{ column.name }} {% br %}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the source columns for a VIEW statement to load data into a cube -- #}
{% macro addSelectColumnsDimCube(indent = "       ",firstInClause = true) %}
  {%- set empty = "" %}
  {%- from table.columns as column where column.sourceTable is defined or column.transform != "" %}
   {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- if column.transform | trim != "" -%}
      {{ column.transform | trim }}
    {%- else -%}
      {%- fetch column.sourceColumn -%}      
      {%- if column.sourceColumn.fullDataType != column.fullDataType and column.artificial == false -%}
        CAST(
      {%- endif -%}        
      {%- if column.sourceColumn.zeroKeyValue | trim != "" and column.artificial == false and column.businessKey == false -%}
        COALESCE({{ column.source }},'{{ column.sourceColumn.zeroKeyValue }}')
      {%- else -%}
        {{ column.source }}
      {%- endif -%}
      {%- if column.sourceColumn.fullDataType != column.fullDataType and column.artificial == false -%}
        {{ empty }} AS {{ column.fullDataType }})
      {%- endif -%}              
    {%- endif %} AS {{ column.name }} {% br %}
  {%- endfrom %}
{% endmacro %}

{# --==============================================================================                                                                         -- #}
{# -- NOT EXISTS                                                                                                                                            -- #}
{# --==============================================================================                                                                         -- #}
 
{% macro addWhereBKNotExists(indent = "       ", firstInClause = true ) %}
  {%- set dssLoadDate = dssLoadDate() | trim %}
  {%- if table.sourceJoinDetails.where | trim == "" and firstInClause  %}
    {{- indent }}WHERE NOT EXISTS ({% br %}
  {%- else %}
    {{- indent }}AND NOT EXISTS ({% br %}
  {%- endif %}
  {{- indent }}        SELECT 1{% br %}
  {{- indent }}        FROM   [TABLEOWNER].[{{ table.name }}] {{ table.name }}__not_exist{% br %}
  {%- from table.columns as column where column.businessKey and column.name != dssLoadDate %} 
    {{- indent }}
    {%- if loop.first %}        WHERE  {% else %}               AND {% endif %}
    {{- table.name }}__not_exist.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}
  {%- endfrom %}
  {{- indent }}){% br %}
{% endmacro %}

{# -- This macro inserts the where not exists query for a history -- #}
{% macro addWhereHistoryNotExists(indent = "        ", firstInClause = true ) %}
  {%- if table.sourceJoinDetails.where | trim == "" and firstInClause %}
    {{- indent }}WHERE NOT EXISTS ({% br %}
  {%- else %}
    {{- indent }}AND NOT EXISTS ({% br %}
  {%- endif %}
  {{- indent }}        SELECT 1{% br %}
  {{- indent }}        FROM   [TABLEOWNER].[{{ table.name }}] {{ table.name }}__not_exist{% br %}
  {%- from table.columns as column where column.businessKey or column.slowlyChanging or column.currentFlag %} 
    {{- indent }}
    {%- if loop.first %}        WHERE  {% else %}               AND {% endif %} 
    {%- if column.currentFlag %}
      {{- table.name }}__not_exist.{{ column.name }} = 'Y'{% br %}
    {%- else %}
      {{- table.name }}__not_exist.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}
    {%- endif %}
  {%- endfrom %}
  {{- indent }}){% br %}  
{% endmacro %}

{% macro addWhereArtificialNotExists(indent = "       ", firstInClause = true ) %}
  {%- if table.sourceJoinDetails.where | trim == "" and firstInClause %}
    {{- indent }}WHERE NOT EXISTS ({% br %}
  {%- else %}
    {{- indent }}AND NOT EXISTS ({% br %}
  {%- endif %}
  {{- indent }}        SELECT 1{% br %}
  {{- indent }}        FROM   [TABLEOWNER].[{{ table.name }}] {{ table.name }}__not_exist{% br %}
  {%- from table.columns as column where column.artificial %} 
    {{- indent }}
    {%- if loop.first %}        WHERE  {% else %}               AND {% endif %} 
    {{- table.name }}__not_exist.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}
  {%- endfrom %}
  {{- indent }}){% br %}    
{% endmacro %}

{# -- This macro inserts the where not exists query for a hub -- #}
{% macro addWhereHubNotExists(indent="      ", firstInClause = true) %}
  {%- if table.sourceJoinDetails.where | trim == "" and firstInClause %}
    {{- indent }}WHERE NOT EXISTS ({% br %}
  {%- else %}
    {{- indent }}AND NOT EXISTS ({% br %}
  {%- endif %}
  {{- indent }}        SELECT 1{% br %}
  {{- indent }}        FROM   [TABLEOWNER].[{{ table.name }}] {{ table.name }}__not_exist{% br %}
  {%- from table.columns as column where column.hubHashKey or column.businessKey %} 
    {{- indent }}
    {%- if loop.first %}        WHERE  {% else %}               AND {% endif %}
    {{- table.name }}__not_exist.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}
  {%- endfrom %}
  {{- indent }}){% br %}
{% endmacro %}

{# -- This macro inserts the where not exists query for a link -- #}
{% macro addWhereLinkNotExists(indent="      ", firstInClause = true) %}
  {%- if table.sourceJoinDetails.where | trim == "" and firstInClause %}
    {{- indent }}WHERE NOT EXISTS ({% br %}
  {%- else %}
    {{- indent }}AND NOT EXISTS ({% br %}
  {%- endif %}
  {{- indent }}        SELECT 1{% br %}
  {{- indent }}        FROM   [TABLEOWNER].[{{ table.name }}] {{ table.name }}__not_exist{% br %}
  {%- from table.columns as column where column.linkHashKey or column.hubHashKey or column.businessKey %}
    {{- indent }}
    {%- if loop.first %}        WHERE  {% else %}               AND {% endif %}
    {{- table.name }}__not_exist.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}
  {%- endfrom %}
  {{- indent }}){% br %}
{% endmacro %}

{# -- This macro inserts the where not exists query for a satellite -- #}
{% macro addWhereSatNotExists(indent="      ", firstInClause = true) %}
  {%- set dssLoadDate = dssLoadDate() | trim %}
  {%- set hasVersionColumn = false -%}      
  {%- from table.columns as column where column.dssVersion -%}
    {%- set hasVersionColumn = true -%}   
  {%- endfrom -%}     
  {%- if table.sourceJoinDetails.where | trim == "" and firstInClause %}
    {{- indent }}WHERE NOT EXISTS ({% br %}
  {%- else %}
    {{- indent }}AND NOT EXISTS ({% br %}
  {%- endif %}
  {{- indent }}        SELECT 1{% br %}
  {{- indent }}        FROM   [TABLEOWNER].[{{ table.name }}] {{ table.name }}__not_exist{% br %}
  {%- from table.columns as column where column.linkHashKey or column.hubHashKey or column.name == dssLoadDate -%} 
    {{- indent }}
    {%- if loop.first %}        WHERE  {% else %}               AND {% endif %}
    {%- if column.name == dssLoadDate %}
      {%- if hasVersionColumn == false %}     
        {{- table.name }}__not_exist.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}      
      {%- else %}
        {{- table.name }}__not_exist.{{ column.name }} < {{ table.name }}.{{ column.name }}{% br %}      
      {%- endif %}      
    {%- else %}
      {{- table.name }}__not_exist.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}
    {%- endif %}          
  {%- endfrom %}
  {{- indent }}){% br %}
{% endmacro %}

{% macro addWhereBKNotExistsRT(indent = "       ",sourceTable = "", targetTable = table.name, firstInClause = true ) %}
  {%- set dssLoadDate = dssLoadDate() | trim %}
  {%- set empty = "" %}
  {%- if table.sourceJoinDetails.where | trim == "" and firstInClause  %}
    {{- indent }}WHERE NOT EXISTS ({% br %}
  {%- else %}
    {{- indent }}AND NOT EXISTS ({% br %}
  {%- endif %}
  {{- indent }}       SELECT 1{% br %}
  {{- indent }}       FROM   {{ sourceTable }} AS t{% br %}
  {%- from table.columns as column where column.businessKey and column.name != dssLoadDate %} 
    {{- indent }}
    {%- if loop.first %}        WHERE  {% else %}               AND {% endif %}
    {{- empty -}}t.{{ column.name }} = {{ targetTable }}.{{ column.name }}{% br %}
  {%- endfrom %}    
  {{- indent }}){% br %}
{% endmacro %}

{# --==============================================================================                                                                         -- #}
{# -- Current Versions                                                                                                                                      -- #}
{# --==============================================================================                                                                         -- #}

{# -- This macro inserts the query to find the current row for a history -- #}
{% macro addHistoryCurrentVersion(indent ="        ") %}
  {{- indent }}LEFT OUTER JOIN ({% br %}
  {{- indent }}        SELECT{% br %}
  {%- from table.columns as column where column.businessKey %} 
    {{- indent }}
    {%- if loop.first %}               {% else %}              ,{% endif %}{{ table.name }}__current.{{ column.name }} AS {{ column.name }}{% br %}
  {%- endfrom %}
  {%- from table.columns as column where column.dssVersion %} 
    {{- indent }}              ,MAX({{ table.name }}__current.{{ column.name }}) AS {{ column.name }}{% br %}
  {%- endfrom %}
  {{- indent }}        FROM  [TABLEOWNER].[{{ table.name }}] {{ table.name }}__current{% br %}
  {{- indent }}        GROUP BY{% br %}
  {%- from table.columns as column where column.businessKey %} 
    {{- indent }}
    {%- if loop.first %}               {% else %}              ,{% endif %}{{ table.name }}__current.{{ column.name }}{% br %}
  {%- endfrom %}
  {{- indent }}) AS current_rows{% br %}
  {%- from table.columns as column where column.businessKey %} 
    {{- indent }} 
    {%- if loop.first %}    ON  {% else %}    AND {% endif %}current_rows.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}
  {%- endfrom %}
{% endmacro %}

{# -- This macro inserts the query to find the current row for a satellite -- #}
{% macro addSatCurrentVersion(indent ="        ") %}
  {{- indent }}LEFT OUTER JOIN ({% br %}
  {{- indent }}        SELECT{% br %}
  {%- from table.columns as column where column.hubHashKey or column.linkHashKey %} 
    {{- indent }}
    {%- if loop.first %}               {% else %}              ,{% endif %}{{ table.name }}__current.{{ column.name }} AS {{ column.name }}{% br %}
  {%- endfrom %}
  {%- from table.columns as column where column.dssStartDate or column.dssVersion %} 
    {{- indent }}              ,MAX({{ table.name }}__current.{{ column.name }}) AS {{ column.name }}{% br %}
  {%- endfrom %}
  {{- indent }}        FROM   [TABLEOWNER].[{{ table.name }}] {{ table.name }}__current{% br %}
  {{- indent }}        GROUP BY{% br %}
  {%- from table.columns as column where column.hubHashKey or column.linkHashKey %} 
    {{- indent }}
    {%- if loop.first %}               {% else %}              ,{% endif %}{{ table.name }}__current.{{ column.name }}{% br %}
  {%- endfrom %}
  {{- indent }}) AS current_rows{% br %}
  {%- from table.columns as column where column.hubHashKey or column.linkHashKey %} 
    {{- indent }}
    {%- if loop.first %}    ON  {% else %}    AND {% endif %}current_rows.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}
  {%- endfrom %}
{% endmacro %}

{% macro addSatCurrentVersionView(indent ="") %}
  {{- indent }}INNER JOIN ({% br %}
  {{- indent }}        SELECT{% br %}
  {%- from table.columns as column where column.hubHashKey or column.linkHashKey %} 
    {{- indent }}  
    {%- if loop.first %}               {% else %}              ,{% endif %}{{ column.name }} AS {{ column.name }}{% br %}
  {%- endfrom %}
  {%- from table.columns as column where column.dssStartDate or column.dssVersion %} 
    {{- indent }}              ,MAX({{ column.name }}) AS {{ column.name }}{% br %}
  {%- endfrom %}
  {{- indent }}        FROM   {{ getSourceTableView(target_database = table.database) }}{% br %}
  {{- indent }}        GROUP BY{% br %}
  {%- from table.columns as column where column.hubHashKey or column.linkHashKey %} 
    {{- indent }}
    {%- if loop.first %}               {% else %}              ,{% endif %}{{ column.name }}{% br %}
  {%- endfrom %}
  {{- indent }}) AS current_rows{% br %}
  {%- from table.columns as column where column.hubHashKey or column.linkHashKey %} 
    {{- indent }}
    {%- if loop.first %}    ON  {% else %}    AND {% endif %}current_rows.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}
  {%- endfrom %}
  {%- from table.columns as column where column.dssStartDate or column.dssVersion %} 
    {{- indent }}    AND current_rows.{{ column.name }} = {{ table.name }}.{{ column.name }}{% br %}
  {%- endfrom %}
{% endmacro %}

{# --==============================================================================                                                                         -- #}
{# -- WHERE clauses                                                                                                                                         -- #}
{# --==============================================================================                                                                         -- #}

{# -- This macro inserts the where clause for the max(dss_load_datetime) of the target -- #}
{% macro addWhereDssLoadDateMax(indent = "    ",targetTable = "MISSING") %}
  {{- indent }}WHERE  {{ dssLoadDate() }} > ( SELECT ISNULL(MAX({{ dssLoadDate() }}) , {{ dssDateTimeMinValue() }}) FROM [TABLEOWNER].[{{ targetTable }}]){% br %}
{% endmacro %}

{% macro addWhereBKColumns(indent = "       ", firstInClause = true ) %}
  {%- from table.columns as column where column.businessKey -%}
    {{- indent }}
    {%- if loop.first and firstInClause %}WHERE  {% else %}       AND {% endif %}{{ table.name }}.{{ column.name }} = {{ column.source }}{% br %}    
  {%- endfrom -%}
{% endmacro %}

{% macro addWhereLDTColumn(indent = "       ", firstInClause = true ) %}
  {%- set dssLoadDate = dssLoadDate() | trim %}
  {%- from table.columns as column where column.name == dssLoadDate -%}
    {{- indent }}
    {%- if loop.first and firstInClause %}WHERE  {% else %}       AND {% endif %}{{ table.name }}.{{ column.name }} <> {{ column.source }}{% br %}    
  {%- endfrom -%}
{% endmacro %}

{% macro addWhereCurrentFlagColumns(indent = "       ", firstInClause = true ) %}
  {%- from table.columns as column where column.currentFlag -%}
    {{- indent }}
    {%- if loop.first and firstInClause %}WHERE  {% else %}       AND {% endif %}{{ table.name }}.{{ column.name }} = 'Y'{% br %}    
  {%- endfrom -%}
{% endmacro %}

{% macro addWhereChangingColumns(indent = "       ", firstInClause = true ) %}
  {%- set hasChangingColumn = false -%}
  {{- indent }}       AND ({% br %}
  {%- from table.columns as column where column.slowlyChanging or column.changeHashKey %}
    {{- indent }}
    {%- if loop.first %}              {% else %}              OR {% endif %}{{ table.name }}.{{ column.name }} <> {{ column.source }}{% br %}    
    {%- set hasChangingColumn = true -%}
  {%- endfrom -%}
  {%- if hasChangingColumn == true -%}
    {{- indent }}           ){% br %}
  {%- else -%}
    MISSING_CHANGEHASH --> SET THE CHANGEHASH IN THE COLUMNLIST{% br %}
  {%- endif -%}
{% endmacro %}

{% macro addWhereCondenseSat(indent = "       ", firstInClause = true ) %}
  {%- set dssLoadDate = dssLoadDate() | trim %}
  {%- from table.columns as column where column.changeHashKey or column.name == dssLoadDate -%}
    {{- indent }}
    {%- if loop.first and firstInClause %}WHERE  {% else %}       AND {% endif %}is_{{ column.name }}_change = 1{% br %}    
  {%- endfrom -%}
{% endmacro %}

{# --==============================================================================                                                                         -- #}
{# -- Lookup                                                                                                                                                -- #}
{# --==============================================================================                                                                         -- #}

{% macro addLookupDimension(indent = "   ", firstInClause = true ) %}
  {%- from table.columns as column where column.lookupKey -%}
    {%- fetch column.sourceTable -%}
    {%- set columnDescription = column.description.replace("
","
AND ") -%}
    {{- indent }}LEFT OUTER JOIN [{{ column.sourceTable.database }}].[{{ column.sourceTable.schema }}].[{{ column.sourceTable.name }}] AS {{ column.sourceTable.name }}{% br %}
    {{- indent }}ON {{ getLines(indent,object = columnDescription) }}{% br %}
  {%- endfrom -%}
{% endmacro %}

{# --==============================================================================                                                                         -- #}
{# -- Create Table                                                                                                                                          -- #}
{# --==============================================================================                                                                         -- #}

{% macro addCreateColumns(indent = "       ",firstInClause = true) %}
  {%- from table.columns as column -%}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}{{ column.name }} {{ column.fullDataType }} {{ getNullConstraint(column) }}{% br %} 
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the target columns for a CREATE statement of a temporary table -- #}
{# -- No need for system columns -- #}
{% macro addCreateColumnsTemp(indent = "       ",firstInClause = true) %}
  {%- from table.columns as column where column.createTime == false and column.updateTime == false -%}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}{{ column.name }} {{ column.fullDataType }}{% br %} 
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the target columns for an INSERT statement to load data into a temporary table -- #}
{# -- Like CREATE statement above, no need for system columns -- #}
{% macro addInsertColumnsTemp(indent = "       ",firstInClause = true) %}
  {%- from table.columns as column where column.createTime == false and column.updateTime == false -%}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}{{ column.name }}{% br %}
  {%- endfrom %}
{% endmacro %}

{# -- This macro adds the target columns for a CREATE statement of a temporary table -- #}
{# -- No need for system columns -- #}
{% macro addCreateColumnsPIT(indent = "       ",firstInClause = true) %}
  {%- set SnapshotDate = SnapshotDate() | trim %}
  {%- from table.columns as column where column.hubHashKey or column.name == SnapshotDate -%}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}{{ column.name }} {{ column.fullDataType }}{% br %} 
  {%- endfrom %}
{% endmacro %}

{# --==============================================================================                                                                         -- #}
{# -- Others                                                                                                                                                -- #}
{# --==============================================================================                                                                         -- #}

{% macro addSelectColumnsTimeline(indent = "       ",firstInClause = true) %}
  {%- set dssEffectivityDate = dssEffectivityDate() | trim %}
  {%- set dssExpiryDate = dssExpiryDate() | trim %}  
  {%- set isActive = isActive() | trim %}    
  {%- set empty = "" -%}
  {%- from table.columns as column where ((column.sourceTable is defined or column.transform != "") and column.lookupKey == false) or column.name == dssEffectivityDate or column.name == dssExpiryDate or column.dssEndDate %}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}
    {%- if column.dssStartDate -%}
      {%- set first_start_datetime_value = "" -%}        
      {%- if table.extendedPropertyValuesByName.first_start_datetime_value is defined -%}
        {%- set list = table.extendedPropertyValuesByName.first_start_datetime_value -%}
        {%- for item in (list | lines) -%}
          {%- if item | trim != "" -%}{%- set first_start_datetime_value = item | trim -%}{%- endif %}
        {%- endfor %} 
      {%- endif %}  
      {%- if first_start_datetime_value | trim == "" -%}
        CASE WHEN LAG({{ dssStartDate() }},1,NULL) OVER (PARTITION BY {{ getHashKeyString() }} ORDER BY {{ dssStartDate() }} ) IS NULL THEN {{ dssDateTimeMinValue() }} ELSE {{ dssStartDate() }} END
      {%- else -%}
        CASE WHEN LAG({{ dssStartDate() }},1,NULL) OVER (PARTITION BY {{ getHashKeyString() }} ORDER BY {{ dssStartDate() }} ) IS NULL THEN {{ first_start_datetime_value  }} ELSE {{ dssStartDate() }} END
      {%- endif -%}
    {%- elseif column.dssEndDate -%}
      LEAD(DATEADD(ns,-100,{{ dssStartDate() }}),1,{{ dssDateTimeMaxValue() }}) OVER (PARTITION BY {{ getHashKeyString() }} ORDER BY {{ dssStartDate() }})
    {%- elseif column.name == dssEffectivityDate -%}
      {%- set first_effectivity_datetime_value = "" -%}        
      {%- if table.extendedPropertyValuesByName.first_effectivity_datetime_value is defined -%}
        {%- set list = table.extendedPropertyValuesByName.first_effectivity_datetime_value -%}
        {%- for item in (list | lines ) -%}
          {%- if item | trim != "" -%}{%- set first_effectivity_datetime_value = item | trim -%}{%- endif %}
        {%- endfor %} 
      {%- endif %}
      {%- if first_effectivity_datetime_value | trim == "" -%}               
        CASE WHEN LAG({{ dssEventDate() }},1,NULL) OVER (PARTITION BY {{ getHashKeyString() }} ORDER BY {{ dssEventDate() }}) IS NULL THEN {{ dssDateTimeMinValue() }} ELSE {{ dssEventDate() }} END
      {%- else -%}
        CASE WHEN LAG({{ dssEventDate() }},1,NULL) OVER (PARTITION BY {{ getHashKeyString() }} ORDER BY {{ dssEventDate() }}) IS NULL THEN {{ first_effectivity_datetime_value }} ELSE {{ dssEventDate() }} END
      {%- endif -%}
    {%- elseif column.name == dssExpiryDate -%}
      {%- from table.columns as column2 %}
        {%- if column2.name == isActive %}
          {{- empty }}CASE WHEN {{ table.name }}.{{ column2.name }} = 0 THEN {{ table.name }}.{{ dssEventDate() }} ELSE{% br %}{{- indent }} {{- empty }}
        {%- endif %}
      {%- endfrom %}    
        {{- empty }}LEAD(DATEADD(ns,-100,{{ dssEventDate() }}),1,{{ dssDateTimeMaxValue() }}) OVER (PARTITION BY {{ getHashKeyString() }} ORDER BY {{ dssEventDate() }},{{ dssLoadDate() }})
      {%- from table.columns as column2 %}
        {%- if column2.name == isActive %}
          {{- empty }} END
        {%- endif %}
      {%- endfrom %}
    {%- else -%}
      {{ table.name }}.{{ column.name }}            
    {%- endif %} AS {{ column.name }} {% br %}
  {%- endfrom %}
{% endmacro %}

{% macro addIndexBKColumns(indent = "   ", firstInClause = true ) %}
  {%- from table.columns as column where column.businessKey -%}
    {{- indent }}
    {%- if loop.first and firstInClause %} {% else %},{% endif %}{{ column.name }} ASC{% br %}    
  {%- endfrom -%}
{% endmacro %}
